@file:Suppress("unused")

package xyz.xenondevs.nova.network

import it.unimi.dsi.fastutil.objects.Object2IntMap
import net.minecraft.network.RegistryFriendlyByteBuf
import net.minecraft.network.codec.IdDispatchCodec
import net.minecraft.network.protocol.PacketType
import net.minecraft.network.protocol.common.CommonPacketTypes
import net.minecraft.network.protocol.cookie.CookiePacketTypes
import net.minecraft.network.protocol.game.GamePacketTypes
import net.minecraft.network.protocol.game.GameProtocols
import net.minecraft.network.protocol.ping.PingPacketTypes
import xyz.xenondevs.nova.util.REGISTRY_ACCESS

internal object PacketIdRegistry {
    
    private val CLIENTBOUND_PACKET_IDS: Object2IntMap<PacketType<*>> = getClientboundPacketIdMap()
    private val SERVERBOUND_PACKET_IDS: Object2IntMap<PacketType<*>> = getServerboundPacketIdMap()
    
    val PLAY_SERVERBOUND_ACCEPT_TELEPORTATION = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_ACCEPT_TELEPORTATION)
    val PLAY_SERVERBOUND_BLOCK_ENTITY_TAG_QUERY = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_BLOCK_ENTITY_TAG_QUERY)
    val PLAY_SERVERBOUND_BUNDLE_ITEM_SELECTED = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_BUNDLE_ITEM_SELECTED)
    val PLAY_SERVERBOUND_CHANGE_DIFFICULTY = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CHANGE_DIFFICULTY)
    val PLAY_SERVERBOUND_CHAT_ACK = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CHAT_ACK)
    val PLAY_SERVERBOUND_CHAT_COMMAND = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CHAT_COMMAND)
    val PLAY_SERVERBOUND_CHAT_COMMAND_SIGNED = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CHAT_COMMAND_SIGNED)
    val PLAY_SERVERBOUND_CHAT = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CHAT)
    val PLAY_SERVERBOUND_CHAT_SESSION_UPDATE = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CHAT_SESSION_UPDATE)
    val PLAY_SERVERBOUND_CHUNK_BATCH_RECEIVED = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CHUNK_BATCH_RECEIVED)
    val PLAY_SERVERBOUND_CLIENT_COMMAND = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CLIENT_COMMAND)
    val PLAY_SERVERBOUND_CLIENT_TICK_END = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CLIENT_TICK_END)
    val PLAY_SERVERBOUND_CLIENT_INFORMATION = SERVERBOUND_PACKET_IDS.getInt(CommonPacketTypes.SERVERBOUND_CLIENT_INFORMATION)
    val PLAY_SERVERBOUND_COMMAND_SUGGESTION = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_COMMAND_SUGGESTION)
    val PLAY_SERVERBOUND_CONFIGURATION_ACKNOWLEDGED = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CONFIGURATION_ACKNOWLEDGED)
    val PLAY_SERVERBOUND_CONTAINER_BUTTON_CLICK = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CONTAINER_BUTTON_CLICK)
    val PLAY_SERVERBOUND_CONTAINER_CLICK = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CONTAINER_CLICK)
    val PLAY_SERVERBOUND_CONTAINER_CLOSE = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CONTAINER_CLOSE)
    val PLAY_SERVERBOUND_CONTAINER_SLOT_STATE_CHANGED = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_CONTAINER_SLOT_STATE_CHANGED)
    val PLAY_SERVERBOUND_COOKIE_RESPONSE = SERVERBOUND_PACKET_IDS.getInt(CookiePacketTypes.SERVERBOUND_COOKIE_RESPONSE)
    val PLAY_SERVERBOUND_CUSTOM_PAYLOAD = SERVERBOUND_PACKET_IDS.getInt(CommonPacketTypes.SERVERBOUND_CUSTOM_PAYLOAD)
    val PLAY_SERVERBOUND_DEBUG_SAMPLE_SUBSCRIPTION = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_DEBUG_SAMPLE_SUBSCRIPTION)
    val PLAY_SERVERBOUND_EDIT_BOOK = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_EDIT_BOOK)
    val PLAY_SERVERBOUND_ENTITY_TAG_QUERY = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_ENTITY_TAG_QUERY)
    val PLAY_SERVERBOUND_INTERACT = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_INTERACT)
    val PLAY_SERVERBOUND_JIGSAW_GENERATE = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_JIGSAW_GENERATE)
    val PLAY_SERVERBOUND_KEEP_ALIVE = SERVERBOUND_PACKET_IDS.getInt(CommonPacketTypes.SERVERBOUND_KEEP_ALIVE)
    val PLAY_SERVERBOUND_LOCK_DIFFICULTY = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_LOCK_DIFFICULTY)
    val PLAY_SERVERBOUND_MOVE_PLAYER_POS = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_MOVE_PLAYER_POS)
    val PLAY_SERVERBOUND_MOVE_PLAYER_POS_ROT = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_MOVE_PLAYER_POS_ROT)
    val PLAY_SERVERBOUND_MOVE_PLAYER_ROT = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_MOVE_PLAYER_ROT)
    val PLAY_SERVERBOUND_MOVE_PLAYER_STATUS_ONLY = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_MOVE_PLAYER_STATUS_ONLY)
    val PLAY_SERVERBOUND_MOVE_VEHICLE = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_MOVE_VEHICLE)
    val PLAY_SERVERBOUND_PADDLE_BOAT = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_PADDLE_BOAT)
    val PLAY_SERVERBOUND_PICK_ITEM_FROM_BLOCK = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_PICK_ITEM_FROM_BLOCK)
    val PLAY_SERVERBOUND_PICK_ITEM_FROM_ENTITY = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_PICK_ITEM_FROM_ENTITY)
    val PLAY_SERVERBOUND_PING_REQUEST = SERVERBOUND_PACKET_IDS.getInt(PingPacketTypes.SERVERBOUND_PING_REQUEST)
    val PLAY_SERVERBOUND_PLACE_RECIPE = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_PLACE_RECIPE)
    val PLAY_SERVERBOUND_PLAYER_ABILITIES = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_PLAYER_ABILITIES)
    val PLAY_SERVERBOUND_PLAYER_ACTION = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_PLAYER_ACTION)
    val PLAY_SERVERBOUND_PLAYER_COMMAND = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_PLAYER_COMMAND)
    val PLAY_SERVERBOUND_PLAYER_INPUT = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_PLAYER_INPUT)
    val PLAY_SERVERBOUND_PLAYER_LOADED = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_PLAYER_LOADED)
    val PLAY_SERVERBOUND_PONG = SERVERBOUND_PACKET_IDS.getInt(CommonPacketTypes.SERVERBOUND_PONG)
    val PLAY_SERVERBOUND_RECIPE_BOOK_CHANGE_SETTINGS = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_RECIPE_BOOK_CHANGE_SETTINGS)
    val PLAY_SERVERBOUND_RECIPE_BOOK_SEEN_RECIPE = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_RECIPE_BOOK_SEEN_RECIPE)
    val PLAY_SERVERBOUND_RENAME_ITEM = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_RENAME_ITEM)
    val PLAY_SERVERBOUND_RESOURCE_PACK = SERVERBOUND_PACKET_IDS.getInt(CommonPacketTypes.SERVERBOUND_RESOURCE_PACK)
    val PLAY_SERVERBOUND_SEEN_ADVANCEMENTS = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SEEN_ADVANCEMENTS)
    val PLAY_SERVERBOUND_SELECT_TRADE = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SELECT_TRADE)
    val PLAY_SERVERBOUND_SET_BEACON = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SET_BEACON)
    val PLAY_SERVERBOUND_SET_CARRIED_ITEM = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SET_CARRIED_ITEM)
    val PLAY_SERVERBOUND_SET_COMMAND_BLOCK = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SET_COMMAND_BLOCK)
    val PLAY_SERVERBOUND_SET_COMMAND_MINECART = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SET_COMMAND_MINECART)
    val PLAY_SERVERBOUND_SET_CREATIVE_MODE_SLOT = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SET_CREATIVE_MODE_SLOT)
    val PLAY_SERVERBOUND_SET_JIGSAW_BLOCK = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SET_JIGSAW_BLOCK)
    val PLAY_SERVERBOUND_SET_STRUCTURE_BLOCK = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SET_STRUCTURE_BLOCK)
    val PLAY_SERVERBOUND_SET_TEST_BLOCK = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SET_TEST_BLOCK)
    val PLAY_SERVERBOUND_SIGN_UPDATE = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SIGN_UPDATE)
    val PLAY_SERVERBOUND_SWING = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_SWING)
    val PLAY_SERVERBOUND_TELEPORT_TO_ENTITY = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_TELEPORT_TO_ENTITY)
    val PLAY_SERVERBOUND_TEST_INSTANCE_BLOCK_ACTION = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_TEST_INSTANCE_BLOCK_ACTION)
    val PLAY_SERVERBOUND_USE_ITEM_ON = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_USE_ITEM_ON)
    val PLAY_SERVERBOUND_USE_ITEM = SERVERBOUND_PACKET_IDS.getInt(GamePacketTypes.SERVERBOUND_USE_ITEM)
    val PLAY_CLIENTBOUND_BUNDLE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_BUNDLE)
    val PLAY_CLIENTBOUND_ADD_ENTITY = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_ADD_ENTITY)
    val PLAY_CLIENTBOUND_ANIMATE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_ANIMATE)
    val PLAY_CLIENTBOUND_AWARD_STATS = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_AWARD_STATS)
    val PLAY_CLIENTBOUND_BLOCK_CHANGED_ACK = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_BLOCK_CHANGED_ACK)
    val PLAY_CLIENTBOUND_BLOCK_DESTRUCTION = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_BLOCK_DESTRUCTION)
    val PLAY_CLIENTBOUND_BLOCK_ENTITY_DATA = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_BLOCK_ENTITY_DATA)
    val PLAY_CLIENTBOUND_BLOCK_EVENT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_BLOCK_EVENT)
    val PLAY_CLIENTBOUND_BLOCK_UPDATE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_BLOCK_UPDATE)
    val PLAY_CLIENTBOUND_BOSS_EVENT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_BOSS_EVENT)
    val PLAY_CLIENTBOUND_CHANGE_DIFFICULTY = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_CHANGE_DIFFICULTY)
    val PLAY_CLIENTBOUND_CHUNK_BATCH_FINISHED = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_CHUNK_BATCH_FINISHED)
    val PLAY_CLIENTBOUND_CHUNK_BATCH_START = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_CHUNK_BATCH_START)
    val PLAY_CLIENTBOUND_CHUNKS_BIOMES = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_CHUNKS_BIOMES)
    val PLAY_CLIENTBOUND_CLEAR_TITLES = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_CLEAR_TITLES)
    val PLAY_CLIENTBOUND_COMMAND_SUGGESTIONS = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_COMMAND_SUGGESTIONS)
    val PLAY_CLIENTBOUND_COMMANDS = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_COMMANDS)
    val PLAY_CLIENTBOUND_CONTAINER_CLOSE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_CONTAINER_CLOSE)
    val PLAY_CLIENTBOUND_CONTAINER_SET_CONTENT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_CONTAINER_SET_CONTENT)
    val PLAY_CLIENTBOUND_CONTAINER_SET_DATA = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_CONTAINER_SET_DATA)
    val PLAY_CLIENTBOUND_CONTAINER_SET_SLOT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_CONTAINER_SET_SLOT)
    val PLAY_CLIENTBOUND_COOKIE_REQUEST = CLIENTBOUND_PACKET_IDS.getInt(CookiePacketTypes.CLIENTBOUND_COOKIE_REQUEST)
    val PLAY_CLIENTBOUND_COOLDOWN = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_COOLDOWN)
    val PLAY_CLIENTBOUND_CUSTOM_CHAT_COMPLETIONS = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_CUSTOM_CHAT_COMPLETIONS)
    val PLAY_CLIENTBOUND_CUSTOM_PAYLOAD = CLIENTBOUND_PACKET_IDS.getInt(CommonPacketTypes.CLIENTBOUND_CUSTOM_PAYLOAD)
    val PLAY_CLIENTBOUND_DAMAGE_EVENT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_DAMAGE_EVENT)
    val PLAY_CLIENTBOUND_DEBUG_SAMPLE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_DEBUG_SAMPLE)
    val PLAY_CLIENTBOUND_DELETE_CHAT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_DELETE_CHAT)
    val PLAY_CLIENTBOUND_DISCONNECT = CLIENTBOUND_PACKET_IDS.getInt(CommonPacketTypes.CLIENTBOUND_DISCONNECT)
    val PLAY_CLIENTBOUND_DISGUISED_CHAT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_DISGUISED_CHAT)
    val PLAY_CLIENTBOUND_ENTITY_EVENT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_ENTITY_EVENT)
    val PLAY_CLIENTBOUND_ENTITY_POSITION_SYNC = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_ENTITY_POSITION_SYNC)
    val PLAY_CLIENTBOUND_EXPLODE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_EXPLODE)
    val PLAY_CLIENTBOUND_FORGET_LEVEL_CHUNK = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_FORGET_LEVEL_CHUNK)
    val PLAY_CLIENTBOUND_GAME_EVENT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_GAME_EVENT)
    val PLAY_CLIENTBOUND_HORSE_SCREEN_OPEN = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_HORSE_SCREEN_OPEN)
    val PLAY_CLIENTBOUND_HURT_ANIMATION = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_HURT_ANIMATION)
    val PLAY_CLIENTBOUND_INITIALIZE_BORDER = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_INITIALIZE_BORDER)
    val PLAY_CLIENTBOUND_KEEP_ALIVE = CLIENTBOUND_PACKET_IDS.getInt(CommonPacketTypes.CLIENTBOUND_KEEP_ALIVE)
    val PLAY_CLIENTBOUND_LEVEL_CHUNK_WITH_LIGHT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_LEVEL_CHUNK_WITH_LIGHT)
    val PLAY_CLIENTBOUND_LEVEL_EVENT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_LEVEL_EVENT)
    val PLAY_CLIENTBOUND_LEVEL_PARTICLES = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_LEVEL_PARTICLES)
    val PLAY_CLIENTBOUND_LIGHT_UPDATE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_LIGHT_UPDATE)
    val PLAY_CLIENTBOUND_LOGIN = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_LOGIN)
    val PLAY_CLIENTBOUND_MAP_ITEM_DATA = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_MAP_ITEM_DATA)
    val PLAY_CLIENTBOUND_MERCHANT_OFFERS = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_MERCHANT_OFFERS)
    val PLAY_CLIENTBOUND_MOVE_ENTITY_POS = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_MOVE_ENTITY_POS)
    val PLAY_CLIENTBOUND_MOVE_ENTITY_POS_ROT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_MOVE_ENTITY_POS_ROT)
    val PLAY_CLIENTBOUND_MOVE_MINECART_ALONG_TRACK = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_MOVE_MINECART_ALONG_TRACK)
    val PLAY_CLIENTBOUND_MOVE_ENTITY_ROT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_MOVE_ENTITY_ROT)
    val PLAY_CLIENTBOUND_MOVE_VEHICLE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_MOVE_VEHICLE)
    val PLAY_CLIENTBOUND_OPEN_BOOK = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_OPEN_BOOK)
    val PLAY_CLIENTBOUND_OPEN_SCREEN = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_OPEN_SCREEN)
    val PLAY_CLIENTBOUND_OPEN_SIGN_EDITOR = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_OPEN_SIGN_EDITOR)
    val PLAY_CLIENTBOUND_PING = CLIENTBOUND_PACKET_IDS.getInt(CommonPacketTypes.CLIENTBOUND_PING)
    val PLAY_CLIENTBOUND_PONG_RESPONSE = CLIENTBOUND_PACKET_IDS.getInt(PingPacketTypes.CLIENTBOUND_PONG_RESPONSE)
    val PLAY_CLIENTBOUND_PLACE_GHOST_RECIPE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PLACE_GHOST_RECIPE)
    val PLAY_CLIENTBOUND_PLAYER_ABILITIES = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PLAYER_ABILITIES)
    val PLAY_CLIENTBOUND_PLAYER_CHAT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PLAYER_CHAT)
    val PLAY_CLIENTBOUND_PLAYER_COMBAT_END = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PLAYER_COMBAT_END)
    val PLAY_CLIENTBOUND_PLAYER_COMBAT_ENTER = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PLAYER_COMBAT_ENTER)
    val PLAY_CLIENTBOUND_PLAYER_COMBAT_KILL = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PLAYER_COMBAT_KILL)
    val PLAY_CLIENTBOUND_PLAYER_INFO_REMOVE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PLAYER_INFO_REMOVE)
    val PLAY_CLIENTBOUND_PLAYER_INFO_UPDATE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PLAYER_INFO_UPDATE)
    val PLAY_CLIENTBOUND_PLAYER_LOOK_AT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PLAYER_LOOK_AT)
    val PLAY_CLIENTBOUND_PLAYER_POSITION = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PLAYER_POSITION)
    val PLAY_CLIENTBOUND_PLAYER_ROTATION = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PLAYER_ROTATION)
    val PLAY_CLIENTBOUND_RECIPE_BOOK_ADD = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_RECIPE_BOOK_ADD)
    val PLAY_CLIENTBOUND_RECIPE_BOOK_REMOVE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_RECIPE_BOOK_REMOVE)
    val PLAY_CLIENTBOUND_RECIPE_BOOK_SETTINGS = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_RECIPE_BOOK_SETTINGS)
    val PLAY_CLIENTBOUND_REMOVE_ENTITIES = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_REMOVE_ENTITIES)
    val PLAY_CLIENTBOUND_REMOVE_MOB_EFFECT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_REMOVE_MOB_EFFECT)
    val PLAY_CLIENTBOUND_RESET_SCORE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_RESET_SCORE)
    val PLAY_CLIENTBOUND_RESOURCE_PACK_POP = CLIENTBOUND_PACKET_IDS.getInt(CommonPacketTypes.CLIENTBOUND_RESOURCE_PACK_POP)
    val PLAY_CLIENTBOUND_RESOURCE_PACK_PUSH = CLIENTBOUND_PACKET_IDS.getInt(CommonPacketTypes.CLIENTBOUND_RESOURCE_PACK_PUSH)
    val PLAY_CLIENTBOUND_RESPAWN = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_RESPAWN)
    val PLAY_CLIENTBOUND_ROTATE_HEAD = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_ROTATE_HEAD)
    val PLAY_CLIENTBOUND_SECTION_BLOCKS_UPDATE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SECTION_BLOCKS_UPDATE)
    val PLAY_CLIENTBOUND_SELECT_ADVANCEMENTS_TAB = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SELECT_ADVANCEMENTS_TAB)
    val PLAY_CLIENTBOUND_SERVER_DATA = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SERVER_DATA)
    val PLAY_CLIENTBOUND_SET_ACTION_BAR_TEXT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_ACTION_BAR_TEXT)
    val PLAY_CLIENTBOUND_SET_BORDER_CENTER = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_BORDER_CENTER)
    val PLAY_CLIENTBOUND_SET_BORDER_LERP_SIZE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_BORDER_LERP_SIZE)
    val PLAY_CLIENTBOUND_SET_BORDER_SIZE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_BORDER_SIZE)
    val PLAY_CLIENTBOUND_SET_BORDER_WARNING_DELAY = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_BORDER_WARNING_DELAY)
    val PLAY_CLIENTBOUND_SET_BORDER_WARNING_DISTANCE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_BORDER_WARNING_DISTANCE)
    val PLAY_CLIENTBOUND_SET_CAMERA = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_CAMERA)
    val PLAY_CLIENTBOUND_SET_CHUNK_CACHE_CENTER = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_CHUNK_CACHE_CENTER)
    val PLAY_CLIENTBOUND_SET_CHUNK_CACHE_RADIUS = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_CHUNK_CACHE_RADIUS)
    val PLAY_CLIENTBOUND_SET_CURSOR_ITEM = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_CURSOR_ITEM)
    val PLAY_CLIENTBOUND_SET_DEFAULT_SPAWN_POSITION = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_DEFAULT_SPAWN_POSITION)
    val PLAY_CLIENTBOUND_SET_DISPLAY_OBJECTIVE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_DISPLAY_OBJECTIVE)
    val PLAY_CLIENTBOUND_SET_ENTITY_DATA = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_ENTITY_DATA)
    val PLAY_CLIENTBOUND_SET_ENTITY_LINK = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_ENTITY_LINK)
    val PLAY_CLIENTBOUND_SET_ENTITY_MOTION = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_ENTITY_MOTION)
    val PLAY_CLIENTBOUND_SET_EQUIPMENT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_EQUIPMENT)
    val PLAY_CLIENTBOUND_SET_EXPERIENCE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_EXPERIENCE)
    val PLAY_CLIENTBOUND_SET_HEALTH = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_HEALTH)
    val PLAY_CLIENTBOUND_SET_HELD_SLOT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_HELD_SLOT)
    val PLAY_CLIENTBOUND_SET_OBJECTIVE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_OBJECTIVE)
    val PLAY_CLIENTBOUND_SET_PASSENGERS = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_PASSENGERS)
    val PLAY_CLIENTBOUND_SET_PLAYER_INVENTORY = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_PLAYER_INVENTORY)
    val PLAY_CLIENTBOUND_SET_PLAYER_TEAM = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_PLAYER_TEAM)
    val PLAY_CLIENTBOUND_SET_SCORE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_SCORE)
    val PLAY_CLIENTBOUND_SET_SIMULATION_DISTANCE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_SIMULATION_DISTANCE)
    val PLAY_CLIENTBOUND_SET_SUBTITLE_TEXT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_SUBTITLE_TEXT)
    val PLAY_CLIENTBOUND_SET_TIME = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_TIME)
    val PLAY_CLIENTBOUND_SET_TITLE_TEXT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_TITLE_TEXT)
    val PLAY_CLIENTBOUND_SET_TITLES_ANIMATION = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SET_TITLES_ANIMATION)
    val PLAY_CLIENTBOUND_SOUND_ENTITY = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SOUND_ENTITY)
    val PLAY_CLIENTBOUND_SOUND = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SOUND)
    val PLAY_CLIENTBOUND_START_CONFIGURATION = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_START_CONFIGURATION)
    val PLAY_CLIENTBOUND_STOP_SOUND = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_STOP_SOUND)
    val PLAY_CLIENTBOUND_STORE_COOKIE = CLIENTBOUND_PACKET_IDS.getInt(CommonPacketTypes.CLIENTBOUND_STORE_COOKIE)
    val PLAY_CLIENTBOUND_SYSTEM_CHAT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_SYSTEM_CHAT)
    val PLAY_CLIENTBOUND_TAB_LIST = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_TAB_LIST)
    val PLAY_CLIENTBOUND_TAG_QUERY = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_TAG_QUERY)
    val PLAY_CLIENTBOUND_TAKE_ITEM_ENTITY = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_TAKE_ITEM_ENTITY)
    val PLAY_CLIENTBOUND_TELEPORT_ENTITY = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_TELEPORT_ENTITY)
    val PLAY_CLIENTBOUND_TEST_INSTANCE_BLOCK_STATUS = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_TEST_INSTANCE_BLOCK_STATUS)
    val PLAY_CLIENTBOUND_TICKING_STATE = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_TICKING_STATE)
    val PLAY_CLIENTBOUND_TICKING_STEP = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_TICKING_STEP)
    val PLAY_CLIENTBOUND_TRANSFER = CLIENTBOUND_PACKET_IDS.getInt(CommonPacketTypes.CLIENTBOUND_TRANSFER)
    val PLAY_CLIENTBOUND_UPDATE_ADVANCEMENTS = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_UPDATE_ADVANCEMENTS)
    val PLAY_CLIENTBOUND_UPDATE_ATTRIBUTES = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_UPDATE_ATTRIBUTES)
    val PLAY_CLIENTBOUND_UPDATE_MOB_EFFECT = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_UPDATE_MOB_EFFECT)
    val PLAY_CLIENTBOUND_UPDATE_RECIPES = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_UPDATE_RECIPES)
    val PLAY_CLIENTBOUND_UPDATE_TAGS = CLIENTBOUND_PACKET_IDS.getInt(CommonPacketTypes.CLIENTBOUND_UPDATE_TAGS)
    val PLAY_CLIENTBOUND_PROJECTILE_POWER = CLIENTBOUND_PACKET_IDS.getInt(GamePacketTypes.CLIENTBOUND_PROJECTILE_POWER)
    val PLAY_CLIENTBOUND_CUSTOM_REPORT_DETAILS = CLIENTBOUND_PACKET_IDS.getInt(CommonPacketTypes.CLIENTBOUND_CUSTOM_REPORT_DETAILS)
    val PLAY_CLIENTBOUND_SERVER_LINKS = CLIENTBOUND_PACKET_IDS.getInt(CommonPacketTypes.CLIENTBOUND_SERVER_LINKS)
    
    @Suppress("UNCHECKED_CAST")
    private fun getServerboundPacketIdMap(): Object2IntMap<PacketType<*>> {
        val codec = GameProtocols.SERVERBOUND_TEMPLATE.bind(
            RegistryFriendlyByteBuf.decorator(REGISTRY_ACCESS),
            GameProtocols.Context { false }
        ).codec() as IdDispatchCodec<*, *, PacketType<*>>
        return codec.toId
    }
    
    @Suppress("UNCHECKED_CAST")
    private fun getClientboundPacketIdMap(): Object2IntMap<PacketType<*>> {
        val codec = GameProtocols.CLIENTBOUND_TEMPLATE.bind(
            RegistryFriendlyByteBuf.decorator(REGISTRY_ACCESS)
        ).codec() as IdDispatchCodec<*, *, PacketType<*>>
        return codec.toId
    }
    
}